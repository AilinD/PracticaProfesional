///////////////////////////////////////////////////////////
//  EstudioBLL.cs
//  Implementation of the Class EstudioBLL
//  Generated by Enterprise Architect
//  Created on:      18-ago.-2022 20:47:42
//  Original author: Ailin
///////////////////////////////////////////////////////////


//using Domain;
using DAL.Interfaces;
using BLL.Interfaces;
using BLL.Dto;
using Services;
using BLL.MapperConfig;
using DAL.Factory;
using DAL.Models;
using Services.BLL.Exepciones;
//using DAL.Models;

namespace BLL.Business {
	public class EstudioBLL : IGenericBusiness<EstudioDto>
    {



        private readonly static EstudioBLL _instance = new EstudioBLL();


        public static EstudioBLL Current
        {
            get
            {
                return _instance;
            }
        }

        IGenericRepository<Estudio> genericRepository = FactoryDAL._estudioRepository;

        public void Insert(EstudioDto obj)
        {
            try
            {
                var dtoToentity = new Estudio()
                {
                    Id = obj.Id,
                    Nombre = obj.Nombre

                };
                genericRepository.Insert(dtoToentity);
            }
            catch (Exception ex)
            {
                ExceptionManager.Current.Handle(ex);

                throw;
            }
           
        }

        public void Update(EstudioDto obj)
        {
            try
            {
                var dtoToentity = new Estudio()
                {
                    Id = obj.Id,
                    Nombre = obj.Nombre

                };
                genericRepository.Update(dtoToentity);
            }
            catch (Exception ex)
            {
                ExceptionManager.Current.Handle(ex);

                throw;
            }
           
        }

        public IEnumerable<EstudioDto> GetAll()
        {
            try
            {
                var entity = MapperHelper.GetMapper().
          Map<List<EstudioDto>>(genericRepository.GetAll());

                return entity;
            }
            catch (Exception ex)
            {
                ExceptionManager.Current.Handle(ex);

                throw;
            }
            
        }

        public EstudioDto GetOne(int? guid)
        {
            try
            {
                var op = MapperHelper.GetMapper().Map<EstudioDto>(genericRepository.GetOne(guid));

                return op;
            }
            catch (Exception ex)
            {
                ExceptionManager.Current.Handle(ex);

                throw;
            }
            
        }

        public void Delete(int? guid)
        {
            try
            {
                var op = genericRepository.GetOne(guid);
                if (op != null)
                {
                    genericRepository.Delete(op);
                }
            }
            catch (Exception ex)
            {
                ExceptionManager.Current.Handle(ex);

                throw;
            }
            
        }

       

    }//end EstudioBLL

}//end namespace BLL