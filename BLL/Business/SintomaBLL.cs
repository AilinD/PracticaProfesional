///////////////////////////////////////////////////////////
//  SintomaBLL.cs
//  Implementation of the Class SintomaBLL
//  Generated by Enterprise Architect
//  Created on:      18-ago.-2022 20:48:58
//  Original author: Ailin
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using BLL;
//using Domain;
using BLL.Interfaces;
using BLL.MapperConfig;
using Services;
using DAL.Interfaces;
using DAL.Factory;
using DAL.Models;
using BLL.Dto;
using Services.BLL.Exepciones;
//using DAL.Models;

namespace BLL.Business {
    /// <summary>
    /// Clase de negocio, a traves del UnitOfWork tiene los metodos necesarios para poder comunciarse con la capa de Datos
    /// </summary>
    public class SintomaBLL : IGenericBusiness<SintomaDto>
    {
        private readonly static SintomaBLL _instance = new SintomaBLL();


        public static SintomaBLL Current
        {
            get
            {
                return _instance;
            }
        }

        IGenericRepository<Sintoma> genericRepository = FactoryDAL._sintomaRepository;


        /// <summary>
        /// Inserta un registro en la tabla Sintoma
        /// </summary>
        /// <param name="obj"></param>
        public void Insert(SintomaDto obj)
        {
            try
            {
                var dtoToentity = new Sintoma()
                {
                    IdSintoma = obj.IdSintoma,
                    Nombre = obj.Nombre

                };
                genericRepository.Insert(dtoToentity);
            }
            catch (Exception ex)
            {
                ExceptionManager.Current.Handle(ex);

                 
            }
            
        }

        /// <summary>
        /// Actualiza un registro en la tabla Sintoma
        /// </summary>
        /// <param name="obj"></param>
        public void Update(SintomaDto obj)
        {
            try
            {
                var dtoToentity = new Sintoma()
                {
                    IdSintoma = obj.IdSintoma,
                    Nombre = obj.Nombre

                };
                genericRepository.Update(dtoToentity);
            }
            catch (Exception ex)
            {
                ExceptionManager.Current.Handle(ex);

                 
            }
            
        }

        /// <summary>
        /// Obtiene todos los registros de la tabla Sintoma
        /// </summary>
        /// <returns></returns>
        public IEnumerable<SintomaDto> GetAll()
        {
            try
            {
                var entity = MapperHelper.GetMapper().
        Map<List<SintomaDto>>(genericRepository.GetAll());

                return entity;
            }
            catch (Exception ex)
            {
                ExceptionManager.Current.Handle(ex);

                 
            }
            return null;

        }

        /// <summary>
        /// Obtienme un registro de la tabla Sintoma
        /// </summary>
        /// <param name="guid"></param>
        /// <returns></returns>
        public SintomaDto GetOne(int? guid)
        {
            try
            {
                var op = MapperHelper.GetMapper().Map<SintomaDto>(genericRepository.GetOne(guid));

                return op;
            }
            catch (Exception ex)
            {
                ExceptionManager.Current.Handle(ex);

                 
            }
            return null;

        }

        /// <summary>
        /// Elimina un registro en la tabla Sintoma
        /// </summary>
        /// <param name="guid"></param>
        public void Delete(int? guid)
        {
            try
            {
                var op = genericRepository.GetOne(guid);
                if (op != null)
                {
                    genericRepository.Delete(op);
                }
            }
            catch (Exception ex)
            {
                ExceptionManager.Current.Handle(ex);

                 
            }
            
        }

       
    }//end SintomaBLL

}//end namespace BLL